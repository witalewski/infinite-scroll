{"version":3,"sources":["assets/loading.gif","AppState.js","utils/cookieUtil.js","api/shibeAPI.js","components/NavBar.js","components/Gallery/ImageItem/FavouritesIndicator.js","components/Gallery/ImageItem/FavouritesButton.js","components/Gallery/ImageItem/ImageItem.js","global/constants.js","utils/placeholderHeightGenerator.js","components/Gallery/ImageList.js","components/Gallery/Gallery.js","components/NewPhotosView.js","components/FavouritesView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppState","Object","toConsumableArray","this","imageURLs","concat","Range","placeholdersCount","map","_","observable","Set","match","document","cookie","length","JSON","parse","readFavouritesCookie","action","_this","replace","_this2$imageURLs","_this2","push","apply","_this3","favourites","data","_this4","stringify","favourite","_this5","setFavourites","add","_this6","delete","computed","count","_this7","setPlaceholdersCount","axios","get","getImageURLs","then","_ref","addImageURLs","withRouter","inject","_ref2","appState","observer","location","react_default","a","createElement","className","href","label","path","size","item","key","pathname","Link","to","FavouritesIndicatorStyled","styled","div","_templateObject","FavouritesIndicator","isFavourite","role","aria-label","FavouritesButtonStyled","button","FavouritesButton_templateObject","FavouritesButton","visible","onButtonClick","type","ImageItemStyled","ImageItem_templateObject","ImageItem","_Component","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onImageLoad","target","setState","isImageLoaded","imageHeight","clientHeight","onMouseOver","mouseOver","onMouseOut","state","message","addCurrentImageToFavourites","addToFavourites","image","removeCurrentImageFromFavourites","removeFromFavourites","inherits","createClass","value","_this$props","_this$state","includes","style","height","onClick","alt","src","decoding","onLoad","FavouritesButton_FavouritesButton","FavouritesIndicator_FavouritesIndicator","Component","LIST_MARGIN","MIN_COLUMN_WIDTH","placeholderHeightGenerator","results","next","Math","floor","random","ImageListStyled","ul","ImageList_templateObject","loadingGif","ImageList","arguments","list","columnWidth","i","Gallery_ImageItem_ImageItem","PhotosViewStyled","Gallery_templateObject","Gallery","getMinColumnHeight","columns","listContainerRef","current","childNodes","minHeight","Infinity","min","onScroll","scrollPosition","window","pageYOffset","documentElement","scrollTop","innerHeight","requestMoreImages","onResize","columnsCount","clientWidth","actualColumnWidth","createRef","initialized","addEventListener","infinite","removeEventListener","images","title","imagesByColumn","List","forEach","elem","ref","ImageList_ImageList","Gallery_Gallery","toJS","AppStyled","App_templateObject","App","index_module","components_NavBar","Switch","Route","exact","component","NewPhotosView","FavouritesView","Boolean","hostname","ReactDOM","render","BrowserRouter","basename","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6914a7f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.e404159f.gif\";","import { observable, action, computed } from 'mobx';\nimport { Range, Set } from 'immutable';\nimport { getImageURLs } from './api/shibeAPI';\nimport {\n  storeFavouritesCookie,\n  readFavouritesCookie,\n} from './utils/cookieUtil';\nclass AppState {\n  @observable imageURLs = [];\n  @observable placeholdersCount = 0;\n\n  @observable favourites = new Set(readFavouritesCookie() || []);\n\n  @action\n  setImageURLs = imageURLs => {\n    this.imageURLs.replace(imageURLs);\n  };\n\n  @action addImageURLs = imageURLs => {\n    this.imageURLs.push(...imageURLs);\n  };\n\n  @action setPlaceholdersCount = placeholdersCount => {\n    this.placeholdersCount = placeholdersCount;\n  };\n\n  @action setFavourites = favourites => {\n    this.favourites = favourites;\n    storeFavouritesCookie(favourites);\n  };\n  @action addToFavourites = favourite => {\n    this.setFavourites(this.favourites.add(favourite));\n  };\n\n  @action removeFromFavourites = favourite => {\n    this.setFavourites(this.favourites.delete(favourite));\n  };\n\n  @computed get images() {\n    return [\n      ...this.imageURLs,\n      ...Range(0, this.placeholdersCount).map(_ => ''),\n    ];\n  }\n\n  @action\n  requestMoreImages = count => {\n    this.setPlaceholdersCount(this.placeholdersCount + count);\n    getImageURLs(count).then(({ data }) => {\n      this.setPlaceholdersCount(this.placeholdersCount - count);\n      this.addImageURLs(data);\n    });\n  };\n}\n\nexport { AppState };\n","export const readFavouritesCookie = () => {\n    const match = document.cookie.match(/shibe-dogs-elite=([^;]*)/);\n    if (match !== null && match.length > 0) {\n        return JSON.parse(match[1]);\n    }\n    return null;\n}\nexport const storeFavouritesCookie = data => document.cookie = `shibe-dogs-elite=${JSON.stringify(data)}`;","import axios from 'axios';\nexport const getImageURLs = count => axios.get(`https://cors.io/?https://shibe.online/api/shibes?count=${count}`);","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nexport const NavBar = ({ location, favourites }) => (\n  <nav className=\"navbar sticky-top navbar-light bg-light navbar-expand\">\n    <a className=\"navbar-brand\" href=\"/\">\n      Infinite Scroll Demo\n    </a>\n    <div className=\"collapse navbar-collapse\">\n      <ul className=\"navbar-nav\">\n        {[\n          { label: 'New Photos', path: '/' },\n          { label: `Favourites (${favourites.size})`, path: '/favourites' },\n        ].map(item => (\n          <li\n            key={item.label}\n            className={`nav-item ${location.pathname === item.path &&\n              'active'}`}\n          >\n            <Link className=\"nav-link\" to={item.path}>\n              {item.label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default withRouter(\n  inject(({ appState }) => ({\n    favourites: appState.favourites,\n  }))(observer(NavBar))\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst FavouritesIndicatorStyled = styled.div`\n  position: absolute;\n  bottom: 12px;\n  right: 12px;\n\n  font-size: 36px;\n\n  transition: opacity 0.2s;\n\n  &.favourites-indicator--hidden {\n    opacity: 0;\n  }\n`;\nexport const FavouritesIndicator = ({ isFavourite }) => (\n  <FavouritesIndicatorStyled\n    className={`favourites-indicator ${!isFavourite &&\n      'favourites-indicator--hidden'}`}\n  >\n    <span role=\"img\" aria-label=\"favourite\">\n      ❤️\n    </span>\n  </FavouritesIndicatorStyled>\n);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst FavouritesButtonStyled = styled.button`\n  position: absolute;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 120px;\n  height: 120px;\n  padding-top: 12px;\n  font-size: 64px;\n\n  background: rgba(255, 255, 255, 0.8);\n  border: none;\n\n  &.btn--hidden {\n    opacity: 0;\n  }\n`;\n\nexport const FavouritesButton = ({ visible, isFavourite, onButtonClick }) => (\n  <FavouritesButtonStyled\n    className={`btn btn-light ${!visible && 'btn--hidden'}`}\n    type=\"button\"\n\n  >\n    {isFavourite ? '💔' : '❤️'}\n  </FavouritesButtonStyled>\n);\n","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport styled from '@emotion/styled';\nimport { FavouritesIndicator } from './FavouritesIndicator';\nimport { FavouritesButton } from './FavouritesButton';\n\nconst ImageItemStyled = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  cursor: pointer;\n\n  .image {\n    opacity: 0;\n    position: absolute;\n  }\n\n  .image--loaded {\n    opacity: 1;\n    transition: opacity 0.5s;\n  }\n`;\n\nexport class ImageItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isImageLoaded: false,\n      mouseOver: false,\n      imageHeight: 0,\n    };\n  }\n  onImageLoad = ({ target }) => {\n    this.setState({ isImageLoaded: true, imageHeight: target.clientHeight });\n  };\n\n  onMouseOver = () => {\n    this.setState({ mouseOver: true });\n  };\n\n  onMouseOut = () => {\n    if (!this.state.message) {\n      this.setState({\n        mouseOver: false,\n      });\n    }\n  };\n\n  addCurrentImageToFavourites = () => {\n    this.props.addToFavourites(this.props.image);\n    this.setState({mouseOver:false});\n  };\n\n  removeCurrentImageFromFavourites = () => {\n    this.props.removeFromFavourites(this.props.image);\n    this.setState({mouseOver:false});\n  };\n\n  render() {\n    const { image, favourites } = this.props;\n    const { mouseOver, isImageLoaded, imageHeight } = this.state;\n    const isFavourite = favourites.includes(this.props.image);\n    return (\n      <ImageItemStyled\n        onMouseOver={this.onMouseOver}\n        onMouseOut={this.onMouseOut}\n        style={{ height: imageHeight || this.props.height }}\n        onClick={\n          isFavourite\n            ? this.removeCurrentImageFromFavourites\n            : this.addCurrentImageToFavourites\n        }\n      >\n        {image && (\n          <img\n            className={`image ${isImageLoaded && 'image--loaded'}`}\n            alt=\"Shibe dog\"\n            src={image}\n            decoding=\"async\"\n            onLoad={this.onImageLoad}\n          />\n        )}\n        <FavouritesButton visible={mouseOver} isFavourite={isFavourite} />\n        <FavouritesIndicator isFavourite={isFavourite} />\n      </ImageItemStyled>\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  favourites: appState.favourites,\n  addToFavourites: appState.addToFavourites,\n  removeFromFavourites: appState.removeFromFavourites,\n}))(observer(ImageItem));\n","export const MIN_LIST_WIDTH = 300;\nexport const LIST_MARGIN = 6;\nexport const MIN_COLUMN_WIDTH = MIN_LIST_WIDTH + 2 * LIST_MARGIN;","export const placeholderHeightGenerator = (() => {\n  const results = [0.75, 1, 1, 1.33];\n  return {\n    next: () => results[Math.floor(Math.random() * 4)],\n  };\n})();\n","import React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport ImageItem from './ImageItem/ImageItem';\nimport { LIST_MARGIN } from '../../global/constants';\nimport loadingGif from '../../assets/loading.gif';\nimport { placeholderHeightGenerator } from '../../utils/placeholderHeightGenerator';\n\nconst ImageListStyled = styled.ul`\n  .image-list--item {\n    background-image: url(${loadingGif});\n    background-color: lightgray;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-blend-mode: multiply;\n\n    margin: ${LIST_MARGIN}px 0;\n    transition: height 0.2s;\n  }\n`;\nexport class ImageList extends Component {\n  render() {\n    const { list, columnWidth } = this.props;\n    return (\n      <ImageListStyled className=\"image-list\">\n        {list.map((image, i) => (\n          <li\n            className=\"image-list--item\"\n            key={`${image || 'placeholder'}-${i}`}\n          >\n            <ImageItem\n              image={image}\n              height={placeholderHeightGenerator.next() * columnWidth}\n            />\n          </li>\n        ))}\n      </ImageListStyled>\n    );\n  }\n}\n","import React, { Component, createRef } from 'react';\nimport { List, Range } from 'immutable';\nimport styled from '@emotion/styled';\nimport { ImageList } from './ImageList';\nimport { LIST_MARGIN, MIN_COLUMN_WIDTH } from '../../global/constants';\n\nconst PhotosViewStyled = styled.div`\n  .image-list-container {\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n  }\n\n  .image-list {\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    flex-basis: 50%;\n    padding: 0;\n    margin: 0 ${LIST_MARGIN}px;\n  }\n\n  .image {\n    width: 100%;\n    object-fit: cover;\n  }\n\n  .image-placeholder {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.listContainerRef = createRef();\n    this.state = {\n      initialized: false,\n      columnsCount: 0,\n      actualColumnWidth: 0,\n    };\n  }\n\n  getMinColumnHeight = () => {\n    const columns = this.listContainerRef.current.childNodes;\n    if (columns && columns.length > 0) {\n      let minHeight = Infinity;\n      for (let i = 0; i < columns.length; i++) {\n        minHeight = Math.min(minHeight, columns[i].clientHeight);\n      }\n      return minHeight;\n    }\n    return 0;\n  };\n\n  onScroll = () => {\n    const scrollPosition =\n      window.pageYOffset || document.documentElement.scrollTop;\n    if (this.getMinColumnHeight() < window.innerHeight + scrollPosition) {\n      this.props.requestMoreImages(16);\n    }\n  };\n\n  onResize = () => {\n    const columnsCount = Math.floor(\n      this.listContainerRef.current.clientWidth / MIN_COLUMN_WIDTH\n    );\n    const actualColumnWidth =\n      this.listContainerRef.current.clientWidth / columnsCount -\n      2 * LIST_MARGIN;\n    this.setState({\n      columnsCount,\n      actualColumnWidth,\n    });\n  };\n\n  componentDidMount() {\n    if (!this.state.initialized) {\n      window.addEventListener('resize', this.onResize);\n      this.onResize();\n\n      if (this.props.infinite) {\n        window.addEventListener('scroll', this.onScroll);\n        this.onScroll();\n      }\n\n      this.setState({ initialized: true });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize',this.onResize);\n\n    if (this.props.infinite) {\n      window.removeEventListener('scroll', this.onScroll);\n    }\n  }\n\n  render() {\n    const { columnsCount, actualColumnWidth } = this.state;\n    const { images, title } = this.props;\n    const imagesByColumn = List(Range(0, columnsCount).map(_ => []));\n    \n    if (columnsCount && actualColumnWidth) {\n      images.forEach((elem, i) => {\n        imagesByColumn.get(i % columnsCount).push(elem)\n      });\n    }\n    return (\n      <PhotosViewStyled>\n        <div className=\"row\">\n          <div className=\"col\">\n          <h1>{title}</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col image-list-container\" ref={this.listContainerRef}>\n            {imagesByColumn.map((list, i) => (\n              <ImageList\n                key={`list-${i}-of-${columnsCount}`}\n                list={list}\n                columnWidth={actualColumnWidth}\n              />\n            ))}\n          </div>\n        </div>\n      </PhotosViewStyled>\n    );\n  }\n}\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Gallery } from './Gallery/Gallery';\n\nexport const NewPhotosView = ({ images, requestMoreImages }) => (\n  <Gallery\n    infinite\n    title=\"New Photos\"\n    images={images}\n    requestMoreImages={requestMoreImages}\n  />\n);\n\nexport default inject(({ appState }) => ({\n  images: appState.images,\n  requestMoreImages: appState.requestMoreImages,\n}))(observer(NewPhotosView));\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Gallery } from './Gallery/Gallery';\n\nexport const FavouritesView = ({ favourites }) => (\n  <Gallery title=\"Favourites\" images={favourites.toJS()} />\n);\n\nexport default inject(({ appState }) => ({\n  favourites: appState.favourites,\n}))(observer(FavouritesView));\n","import React from 'react';\nimport { Provider } from 'mobx-react';\nimport styled from '@emotion/styled';\nimport { AppState } from './AppState';\nimport { Switch, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport NewPhotosView from './components/NewPhotosView';\nimport FavouritesView from './components/FavouritesView';\n\nconst AppStyled = styled.div`\n  .main {\n    padding-top: 56px;\n  }\n`;\n\nconst appState = new AppState();\n\nexport const App = () => (\n  <Provider appState={appState}>\n    <AppStyled className=\"App\">\n      <NavBar />\n      <div className=\"main container\">\n        <Switch>\n          <Route exact path=\"/\" component={NewPhotosView} />\n          <Route exact path=\"/favourites\" component={FavouritesView} />\n        </Switch>\n      </div>\n    </AppStyled>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/infinite-scroll\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}