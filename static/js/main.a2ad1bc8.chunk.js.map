{"version":3,"sources":["utils/placeholderHeightGenerator.js","AppState.js","api/shibeAPI.js","components/NavBar.js","components/ImageItem.js","components/ImageList.js","components/AllPhotosView.js","components/FavouritesView.js","App.js","serviceWorker.js","index.js"],"names":["placeholderHeightGenerator","results","next","Math","floor","random","AppState","Object","toConsumableArray","this","imageURLs","concat","Range","placeholdersCount","map","_","isPlaceholder","placeholderHeightRatio","observable","action","_this","replace","_this2$imageURLs","_this2","push","apply","_this3","computed","count","_this4","setPlaceholdersCount","axios","get","getImageURLs","then","_ref","data","addImageURLs","url","withRouter","items","location","react_default","a","createElement","className","href","item","key","label","pathname","path","Link","to","ImageItem","image","onImageLoad","alt","src","decoding","onLoad","ImageList","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","arguments","inherits","createClass","value","target","parentNode","style","minHeight","_this$props","props","list","columnWidth","i","ImageItem_ImageItem","Component","AllPhotosViewStyled","styled","div","_templateObject","AllPhotosView","call","listContainerRef","createRef","state","initialized","columnsCount","actualColumnWidth","requestMoreImages","scrollPosition","window","pageYOffset","document","documentElement","scrollTop","scrollHeight","innerHeight","current","clientWidth","MIN_LIST_WIDTH","setState","addEventListener","onScroll","bind","onResize","_this$state","images","imagesByColumn","List","forEach","elem","ref","ImageList_ImageList","inject","_ref2","appState","observer","FavouritesView","AppStyled","App_templateObject","App","index_module","components_NavBar","Switch","Route","exact","component","Boolean","hostname","match","ReactDOM","render","BrowserRouter","basename","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2ad1bc8.chunk.js","sourcesContent":["export const placeholderHeightGenerator = (() => {\n  const results = [0.75, 1, 1, 1.33];\n  return {\n    next: () => results[Math.floor(Math.random() * 4)],\n  };\n})();\n","import { observable, action, computed } from 'mobx';\nimport { Range } from 'immutable';\nimport { getImageURLs } from './api/shibeAPI';\nimport {placeholderHeightGenerator} from './utils/placeholderHeightGenerator';\nclass AppState {\n  @observable imageURLs = [];\n  @observable placeholdersCount = 0;\n\n  @action\n  setImageURLs = imageURLs => {\n    this.imageURLs.replace(imageURLs);\n  };\n\n  @action addImageURLs = imageURLs => {\n    this.imageURLs.push(...imageURLs);\n  };\n\n  @action setPlaceholdersCount = placeholdersCount => {\n    this.placeholdersCount = placeholdersCount;\n  };\n\n  \n\n  @computed get images() {\n    return [\n      ...this.imageURLs,\n      ...Range(0, this.placeholdersCount).map(_ => ({ isPlaceholder: true, placeholderHeightRatio: placeholderHeightGenerator.next() })),\n    ];\n  }\n\n  @action\n  requestMoreImages = count => {\n    this.setPlaceholdersCount(this.placeholdersCount + count);\n    getImageURLs(count).then(({ data }) => {\n      this.setPlaceholdersCount(this.placeholdersCount - count);\n      this.addImageURLs(data.map(url => ({ url, isPlaceholder: false, placeholderHeightRatio: placeholderHeightGenerator.next()})));\n    });\n  };\n}\n\nexport { AppState };\n","import axios from 'axios';\nexport const getImageURLs = count => axios.get(`https://cors.io/?https://shibe.online/api/shibes?count=${count}`);","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nexport const NavBar = ({ items, location }) => (\n  <nav className=\"navbar sticky-top navbar-light bg-light navbar-expand\">\n    <a className=\"navbar-brand\" href=\"/\">\n      Infinite Scroll Demo\n    </a>\n    <div className=\"collapse navbar-collapse\">\n      <ul className=\"navbar-nav\">\n        {items.map(item => (\n          <li\n            key={item.label}\n            className={`nav-item ${location.pathname === item.path &&\n              'active'}`}\n          >\n            <Link className=\"nav-link\" to={item.path}>\n              {item.label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default withRouter(NavBar);\n","import React from 'react';\n\nexport const ImageItem = ({ image, onImageLoad }) =>\n  image.isPlaceholder ? (\n    <div className=\"image-placeholder\" />\n  ) : (\n    <img\n      className=\"image\"\n      alt=\"Shibe dog\"\n      src={image.url}\n      decoding=\"async\"\n      onLoad={onImageLoad}\n    />\n  );\n","import React, { Component } from 'react';\nimport { ImageItem } from './ImageItem';\n\nexport class ImageList extends Component {\n  onImageLoad({ target }) {\n    target.parentNode.style.minHeight = 0;\n  }\n  render() {\n    const { list, columnWidth } = this.props;\n    return (\n      <ul className=\"image-list\">\n        {list.map((image, i) => (\n          <li\n            className=\"image-list--item\"\n            key={`${image.url || 'placeholder'}-${i}`}\n            style={{\n              minHeight: columnWidth * image.placeholderHeightRatio,\n            }}\n          >\n            <ImageItem image={image} onImageLoad={this.onImageLoad} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n","import React, { Component, createRef } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { List, Range } from 'immutable';\nimport styled from '@emotion/styled';\nimport {ImageList} from './ImageList';\n\nconst MIN_LIST_WIDTH = 300;\nconst LIST_MARGIN = 6;\nconst MIN_COLUMN_WIDTH = MIN_LIST_WIDTH + 2 * LIST_MARGIN;\n\nconst AllPhotosViewStyled = styled.div`\n  .image-list-container {\n    display: flex;\n    justify-content: center;\n  }\n\n  .image-list {\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    flex-basis: 50%;\n    padding: 0;\n    margin: 0 ${LIST_MARGIN}px;\n  }\n\n  .image-list--item {\n    background: lightgray;\n    margin: ${LIST_MARGIN}px 0;\n  }\n\n  .image {\n    width: 100%;\n    object-fit: cover;\n  }\n\n  .image-placeholder {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport class AllPhotosView extends Component {\n  constructor(props) {\n    super(props);\n    this.listContainerRef = createRef();\n    this.state = {\n      initialized: false,\n      columnsCount: 0,\n      actualColumnWidth: 0,\n    };\n  }\n  onScroll() {\n    const { requestMoreImages } = this.props;\n    const scrollPosition =\n      window.pageYOffset || document.documentElement.scrollTop;\n    /* always have one more screen loaded */\n    if (\n      document.documentElement.scrollHeight <\n      window.innerHeight * 2 + scrollPosition\n    ) {\n      requestMoreImages(16);\n    }\n  }\n\n  onResize() {\n    const columnsCount = Math.floor(\n      this.listContainerRef.current.clientWidth / MIN_COLUMN_WIDTH\n    );\n    const actualColumnWidth =\n      this.listContainerRef.current.clientWidth / columnsCount -\n      2 * LIST_MARGIN;\n    this.setState({\n      columnsCount,\n      actualColumnWidth,\n    });\n  }\n\n  componentDidMount() {\n    if (!this.state.initialized) {\n      window.addEventListener('scroll', this.onScroll.bind(this));\n      window.addEventListener('resize', this.onResize.bind(this));\n\n      //invoke at once to get initial values\n      this.onScroll();\n      this.onResize();\n\n      this.setState({ initialized: true });\n    }\n  }\n\n  onImageLoad({ target }) {\n    target.parentNode.style.minHeight = 0;\n  }\n\n  render() {\n    const { columnsCount, actualColumnWidth } = this.state;\n    const { images } = this.props;\n    const imagesByColumn = List(Range(0, columnsCount).map(_ => []));\n    if (columnsCount) {\n      images.forEach((elem, i) =>\n        imagesByColumn.get(i % columnsCount).push(elem)\n      );\n    }\n    return (\n      <AllPhotosViewStyled className=\"row\">\n        <div className=\"col image-list-container\" ref={this.listContainerRef}>\n          {imagesByColumn.map((list, i) => (\n            <ImageList key={`list-${i}-of-${columnsCount}`} list={list} columnWidth={actualColumnWidth}/>\n          ))}\n        </div>\n      </AllPhotosViewStyled>\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  images: appState.images,\n  requestMoreImages: appState.requestMoreImages,\n}))(observer(AllPhotosView));\n","import React from 'react';\n\nexport const FavouritesView = () => (\n  <div className=\"row\">\n    <div className=\"col\">[Favourites]</div>\n  </div>\n);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport styled from '@emotion/styled';\nimport { AppState } from './AppState';\nimport NavBar from './components/NavBar';\nimport AllPhotosView from './components/AllPhotosView';\nimport { FavouritesView } from './components/FavouritesView';\n\nconst AppStyled = styled.div`\n  .main {\n    padding-top: 56px;\n  }\n`;\n\nconst appState = new AppState();\n\nexport const App = () => (\n  <Provider appState={appState}>\n    <AppStyled className=\"App\">\n      <NavBar\n        items={[\n          { label: 'Home', path: '/' },\n          { label: 'Favourites', path: '/favourites' },\n        ]}\n      />\n      <div className=\"main container\">\n        <Switch>\n          <Route exact path=\"/\" component={AllPhotosView} />\n          <Route path=\"/favourites\" component={FavouritesView} />\n        </Switch>\n      </div>\n    </AppStyled>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/infinite-scroll\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}