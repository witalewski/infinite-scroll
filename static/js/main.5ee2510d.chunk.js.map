{"version":3,"sources":["AppState.js","api/shibeAPI.js","components/NavBar.js","components/AllPhotosView.js","components/FavouritesView.js","App.js","serviceWorker.js","index.js"],"names":["AppState","observable","action","imageURLs","_this","replace","isLoadingImageURLs","_this2","count","_this3","setIsLoadingImageURLs","axios","get","concat","getImageURLs","then","_ref","data","setImageURLs","Object","toConsumableArray","withRouter","items","location","react_default","a","createElement","className","href","map","item","key","label","pathname","path","Link","to","AllPhotosViewStyled","styled","div","_templateObject","AllPhotosView","_Component","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","listRef","createRef","state","initialized","inherits","createClass","value","_this$props","loadImageURLs","scrollPosition","window","pageYOffset","document","documentElement","scrollTop","current","clientHeight","innerHeight","addEventListener","loadImageURLsIfNeeded","bind","setState","imagesToDisplay","imageURL","url","isPlaceholder","Range","forEach","i","push","ref","image","alt","src","decoding","Component","inject","appState","observer","FavouritesView","AppStyled","App_templateObject","App","index_module","components_NavBar","Switch","Route","exact","component","Boolean","hostname","match","ReactDOM","render","BrowserRouter","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ee2510d.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport { getImageURLs } from './api/shibeAPI';\nclass AppState {\n  @observable imageURLs = [];\n  @observable isLoadingImageURLs = false;\n\n  @action\n  setImageURLs = imageURLs => {\n    this.imageURLs.replace(imageURLs);\n  };\n  @action setIsLoadingImageURLs = isLoadingImageURLs => {\n    this.isLoadingImageURLs = isLoadingImageURLs;\n  };\n  @action\n  loadImageURLs = count => {\n    this.setIsLoadingImageURLs(true);\n    getImageURLs(count).then(({ data }) => {\n      this.setImageURLs([...this.imageURLs, ...data]);\n      this.setIsLoadingImageURLs(false);\n    });\n  };\n}\n\nexport { AppState };\n","import axios from 'axios';\nexport const getImageURLs = count => axios.get(`https://cors.io/?https://shibe.online/api/shibes?count=${count}`);","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nexport const NavBar = ({ items, location }) => (\n  <nav className=\"navbar sticky-top navbar-light bg-light navbar-expand\">\n    <a className=\"navbar-brand\" href=\"/\">\n      Infinite Scroll Demo\n    </a>\n    <div className=\"collapse navbar-collapse\">\n      <ul className=\"navbar-nav\">\n        {items.map(item => (\n          <li\n            key={item.label}\n            className={`nav-item ${location.pathname === item.path &&\n              'active'}`}\n          >\n            <Link className=\"nav-link\" to={item.path}>\n              {item.label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default withRouter(NavBar);\n","import React, { Component, createRef } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { Range } from 'immutable';\nimport styled from '@emotion/styled';\n\nconst AllPhotosViewStyled = styled.div`\n  .image-list {\n    list-style: none;\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .image {\n    width: 300px;\n    height: 400px;\n    object-fit: cover;\n    margin: 6px;\n  }\n\n  .image-placeholder {\n    background: lightgray;\n    width: 300px;\n    height: 400px;\n    margin: 6px;\n  }\n`;\n\nexport class AllPhotosView extends Component {\n  constructor(props) {\n    super(props);\n    this.listRef = createRef();\n    this.state = {\n      initialized: false,\n    };\n  }\n  loadImageURLsIfNeeded() {\n    const { isLoadingImageURLs, loadImageURLs } = this.props;\n    const scrollPosition =\n      window.pageYOffset || document.documentElement.scrollTop;\n    if (\n      !isLoadingImageURLs &&\n      this.listRef.current &&\n      this.listRef.current.clientHeight < window.innerHeight + scrollPosition\n    ) {\n      loadImageURLs(16);\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.initialized) {\n      window.addEventListener('scroll', this.loadImageURLsIfNeeded.bind(this));\n      this.loadImageURLsIfNeeded();\n      this.setState({ initialized: true });\n    }\n  }\n\n  render() {\n    const imagesToDisplay = this.props.imageURLs.map(imageURL => ({\n      url: imageURL,\n      isPlaceholder: false,\n    }));\n    if (this.props.isLoadingImageURLs) {\n      Range(0, 16).forEach(i => imagesToDisplay.push({ isPlaceholder: true }));\n    }\n\n    return (\n      <AllPhotosViewStyled className=\"row\">\n        <div className=\"col\">\n          <ul className=\"image-list\" ref={this.listRef}>\n            {imagesToDisplay.map((image, i) => (\n              <li key={`${image.url || 'placeholder'}-${i}`}>\n                {image.isPlaceholder ? (\n                  <div className=\"image-placeholder\" />\n                ) : (\n                  <img className=\"image\" alt=\"Shibe dog\" src={image.url} decoding=\"async\" />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </AllPhotosViewStyled>\n    );\n  }\n}\n\nexport default inject(({ appState }) => ({\n  imageURLs: appState.imageURLs,\n  isLoadingImageURLs: appState.isLoadingImageURLs,\n  loadImageURLs: appState.loadImageURLs,\n}))(observer(AllPhotosView));\n","import React from 'react';\n\nexport const FavouritesView = () => (\n  <div className=\"row\">\n    <div className=\"col\">[Favourites]</div>\n  </div>\n);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport styled from '@emotion/styled';\nimport { AppState } from './AppState';\nimport NavBar from './components/NavBar';\nimport AllPhotosView from './components/AllPhotosView';\nimport { FavouritesView } from './components/FavouritesView';\n\nconst AppStyled = styled.div`\n  .main {\n    padding-top: 56px;\n  }\n`;\n\nconst appState = new AppState();\n\nexport const App = () => (\n  <Provider appState={appState}>\n    <AppStyled className=\"App\">\n      <NavBar\n        items={[\n          { label: 'Home', path: '/' },\n          { label: 'Favourites', path: '/favourites' },\n        ]}\n      />\n      <div className=\"main container\">\n        <Switch>\n          <Route exact path=\"/\" component={AllPhotosView} />\n          <Route path=\"/favourites\" component={FavouritesView} />\n        </Switch>\n      </div>\n    </AppStyled>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}