{"version":3,"sources":["AppState.js","api/shibeAPI.js","components/NavBar.js","components/AllPhotosView.js","components/FavouritesView.js","App.js","serviceWorker.js","index.js"],"names":["AppState","observable","action","imageURLs","_this","replace","count","axios","get","getImageURLs","then","_ref","data","_this2","setImageURLs","Object","toConsumableArray","concat","withRouter","items","location","react_default","a","createElement","className","href","map","item","key","label","pathname","path","Link","to","AllPhotosView","FavouritesView","AppStyled","styled","div","_templateObject","appState","App","index_module","components_NavBar","Switch","Route","exact","component","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAEMA,oMACHC,6EAAuB,gDAEvBC,yFACc,SAAAC,GACbC,EAAKD,UAAUE,QAAQF,kDAExBD,yFACe,SAAAI,ICTU,SAAAA,GAAK,OAAIC,IAAMC,IAAI,mDAAmD,CAACF,WDU/FG,CAAaH,GAAOI,KAAK,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACzBC,EAAKC,aAALC,OAAAC,EAAA,EAAAD,CAAsBF,EAAKV,WAA3Bc,OAAAF,OAAAC,EAAA,EAAAD,CAAwCH,8BEa/BM,cAvBO,SAAAP,GAAA,IAAGQ,EAAHR,EAAGQ,MAAOC,EAAVT,EAAUS,SAAV,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,wBAGAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXL,EAAMO,IAAI,SAAAC,GAAI,OACbN,EAAAC,EAAAC,cAAA,MACEK,IAAKD,EAAKE,MACVL,UAAS,YAAAP,OAAcG,EAASU,WAAaH,EAAKI,MAChD,WAEFV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMR,UAAU,WAAWS,GAAIN,EAAKI,MACjCJ,EAAKE,eCdPK,EAAgB,kBAC3Bb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,kBCFSW,EAAiB,kBAC5Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,iICKJ,IAAMY,EAAYC,IAAOC,IAAVC,KAMTC,EAAW,IAAIxC,EAqBNyC,EAnBI,kBACjBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAUF,SAAUA,GAClBnB,EAAAC,EAAAC,cAACa,EAAD,CAAWZ,UAAU,OACnBH,EAAAC,EAAAC,cAACoB,EAAD,CACExB,MAAO,CACL,CAAEU,MAAO,OAAQE,KAAM,KACvB,CAAEF,MAAO,aAAcE,KAAM,kBAGjCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACf,KAAK,IAAIgB,UAAWb,IACjCb,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOd,KAAK,cAAcgB,UAAWZ,SCjB3Ba,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACPhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.d00c910f.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport { getImageURLs } from './api/shibeAPI';\nclass AppState {\n  @observable imageURLs = [];\n  \n  @action\n  setImageURLs = imageURLs => {\n    this.imageURLs.replace(imageURLs);\n  }\n  @action\n  loadImageURLs = count => {\n    getImageURLs(count).then(({data}) => {\n      this.setImageURLs([...this.imageURLs,...data]);\n    })\n  }\n}\n\nexport { AppState };\n","import axios from 'axios';\nexport const getImageURLs = count => axios.get('https://cors.io/?https://shibe.online/api/shibes',{count});","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nexport const NavBar = ({ items, location }) => (\n  <nav className=\"navbar sticky-top navbar-light bg-light navbar-expand\">\n    <a className=\"navbar-brand\" href=\"/\">\n      Infinite Scroll Demo\n    </a>\n    <div className=\"collapse navbar-collapse\">\n      <ul className=\"navbar-nav\">\n        {items.map(item => (\n          <li\n            key={item.label}\n            className={`nav-item ${location.pathname === item.path &&\n              'active'}`}\n          >\n            <Link className=\"nav-link\" to={item.path}>\n              {item.label}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </nav>\n);\n\nexport default withRouter(NavBar);\n","import React from 'react';\n\nexport const AllPhotosView = () => (\n  <div className=\"row\">\n    <div className=\"col\">[All photos]</div>\n  </div>\n);\n","import React from 'react';\n\nexport const FavouritesView = () => (\n  <div className=\"row\">\n    <div className=\"col\">[Favourites]</div>\n  </div>\n);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport styled from '@emotion/styled';\nimport { AppState } from './AppState';\nimport NavBar from './components/NavBar';\nimport { AllPhotosView } from './components/AllPhotosView';\nimport { FavouritesView } from './components/FavouritesView';\n\nconst AppStyled = styled.div`\n  .main {\n    padding-top: 56px;\n  }\n`;\n\nconst appState = new AppState();\n\nexport const App = () => (\n  <Provider appState={appState}>\n    <AppStyled className=\"App\">\n      <NavBar\n        items={[\n          { label: 'Home', path: '/' },\n          { label: 'Favourites', path: '/favourites' },\n        ]}\n      />\n      <div className=\"main container\">\n        <Switch>\n          <Route exact path=\"/\" component={AllPhotosView} />\n          <Route path=\"/favourites\" component={FavouritesView} />\n        </Switch>\n      </div>\n    </AppStyled>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}